service: sls-order-land

plugins:
  - serverless-offline

custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name

frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  region: us-east-1
  stage: dev
  memorySize: 128
  timeout: 5
  endpointType: REGIONAL
  environment:
    PRODUCT_TABLE: ${self:service}-${opt:stage, self:provider.stage}-product
    BASKET_TABLE: ${self:service}-${opt:stage, self:provider.stage}-basket
  iamRoleStatements:
    - Effect: Allow
      Action: 
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PRODUCT_TABLE}"

functions:
  add-product:
    handler: api/products/add-product.handler
    description: POST /product
    events:
      - http:
          path: product
          method: post
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  delete-product:
    handler: api/products/delete-product.handler
    description: DELETE product
    events:
      - http:
          path: product/{productId}
          method: delete
          cors: 
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  get-product:
    handler: api/products/get-product.handler
    description: GET product/{productId}
    events:
      - http:
          path: product/{productId}
          method: get
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  get-products:
    handler: api/products/get-products.handler
    description: GET products
    events:
      - http:
          path: products
          method: get
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  update-product:
    handler: api/products/update-product.handler
    description: PATCH /product
    events:
      - http:
          path: product
          method: patch
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  add-basket:
    handler: api/basket/add-basket.handler
    description: POST /basket
    events:
      - http:
          path: basket
          method: post
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  checkout-basket:
    handler: api/basket/checkout-basket.handler
    description: POST /basket/checkout
    events:
      - http:
          path: basket/checkout
          method: post
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  delete-basket:
    handler: api/basket/delete-basket.handler
    description: DELETE basket
    events:
      - http:
          path: basket
          method: delete
          cors: 
            origin: '*'
            headers: ${self.custom.allowedHeaders}
  get-basket:
    handler: api/basket/get-basket.handler
    description: GET basket
    events:
      - http:
          path: basket
          method: get
          cors:
            origin: '*'
            headers: ${self.custom.allowedHeaders}

resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PRODUCT_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: N
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BasketTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.BASKET_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1

