service: sls-order-land
plugins:
  - serverless-offline
  - serverless-lift
custom:
  allowedHeaders:
    - Accept
    - Content-Type
    - Content-Length
    - Authorization
    - X-Amz-Date
    - X-Api-Key
    - X-Amz-Security-Token
    - X-Amz-User-Agent
    - app_user_id
    - app_user_name
frameworkVersion: '3'
provider:
  name: aws
  runtime: nodejs14.x
  region: us-east-1
  stage: dev
  memorySize: 128
  timeout: 5
  endpointType: REGIONAL
  environment:
    REGION: us-east-1
    PRODUCT_TABLE: ${self:service}-${opt:stage, self:provider.stage}-product
    BASKET_TABLE: ${self:service}-${opt:stage, self:provider.stage}-basket
    ORDER_TABLE: ${self:service}-${opt:stage, self:provider.stage}-order
    COGNITO_IDENTITY_POOL_ID: us-east-1:1dc61573-21a6-4f0a-b14f-dc122b292f39
    BUCKET_NAME: ${self:service}-${opt:stage, self:provider.stage}-uploaded
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.PRODUCT_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.BASKET_TABLE}
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:DeleteItem
        - dynamodb:Scan
      Resource: arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.ORDER_TABLE}
    - Effect: Allow
      Action:
        - events:PutEvents
      Resource: arn:aws:events:us-east-1:656113873765:event-bus/sls-event-bus
    - Effect: Allow
      Action: 
        - s3:ListBucket
      Resource: arn:aws:s3:::sls-order-land-dev-uploaded
    - Effect: Allow
      Action: 
        - s3:*
      Resource: arn:aws:s3:::sls-order-land-dev-uploaded/*
constructs:
  jobs:
    type: queue
    worker:
      handler: api/ordering/index.consumer
functions:
  authenticate-google:
    handler: api/authenticate-google.handler
    description: Google IDP Authentication
    events:
      - http:
          path: auth
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  basket-bridge:
    handler: api/bridge.handler
    events:
      - eventBridge:
          eventBus: sls-event-bus
          pattern: 
            source:
              - com.sls.basket.checkoutbasket
            detail-type:
              - CheckoutBasket
  add-product:
    handler: api/products/index.add
    description: POST /product
    events:
      - http:
          path: product
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-product:
    handler: api/products/index.del
    description: DELETE product
    events:
      - http:
          path: product/{productId}
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-product:
    handler: api/products/index.getProduct
    description: GET product/{productId}
    events:
      - http:
          path: product/{productId}
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  import-products-file:
    handler: api/products/index.importProductsFile
    description: GET import/
    events:
      - http:
          path: import
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  import-file-parser:
    handler: api/products/index.importFileParser
    description: File parser event
    events:
      - s3:
          bucket: ${self:provider.environment.BUCKET_NAME}
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  get-products:
    handler: api/products/index.getProducts
    description: GET products
    events:
      - http:
          path: products
          method: get
          authorizer:
            type: aws_iam
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  update-product:
    handler: api/products/index.update
    description: PATCH /product
    events:
      - http:
          path: product
          method: patch
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-basket:
    handler: api/basket/index.getBasket
    description: GET /basket
    events:
      - http:
          path: basket
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  add-basket:
    handler: api/basket/index.add
    description: POST /basket
    events:
      - http:
          path: basket
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  delete-basket:
    handler: api/basket/index.del
    description: DELETE basket
    events:
      - http:
          path: basket
          method: delete
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  checkout-basket:
    handler: api/basket/index.checkoutBasket
    description: POST /basket/checkout
    events:
      - http:
          path: basket/checkout
          method: post
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
    environment:
      QUEUE_URL: ${construct:jobs.queueUrl}
  get-order:
    handler: api/ordering/index.getOrder
    description: GET order
    events:
      - http:
          path: order
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
  get-orders:
    handler: api/ordering/index.getOrders
    description: GET orders
    events:
      - http:
          path: orders
          method: get
          cors:
            origin: '*'
            headers: ${self:custom.allowedHeaders}
resources:
  Resources:
    ProductTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.PRODUCT_TABLE}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
          - AttributeName: timestamp
            AttributeType: 'N'
        KeySchema:
          - AttributeName: id
            KeyType: HASH
          - AttributeName: timestamp
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    BasketTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.BASKET_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    OrderTable:
      Type: AWS::DynamoDB::Table
      DeletionPolicy: Retain
      Properties:
        TableName: ${self:provider.environment.ORDER_TABLE}
        AttributeDefinitions:
          - AttributeName: userName
            AttributeType: S
          - AttributeName: orderDate
            AttributeType: S
        KeySchema:
          - AttributeName: userName
            KeyType: HASH
          - AttributeName: orderDate
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    UploadedBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.BUCKET_NAME} 
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
        ResponseType: DEFAULT_4XX
        RestApiId: 
          Ref: 'ApiGatewayRestApi'